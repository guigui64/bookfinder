{"version":3,"sources":["components/book-card.jsx","components/card-group.jsx","components/searchbox.jsx","components/parent.jsx","App.jsx","serviceWorker.js","index.js"],"names":["BookCard","imgSrc","title","author","publisher","link","Card","bg","Img","variant","src","style","height","width","objectFit","Body","Title","Text","Button","href","target","props","className","display","gridTemplateColumns","gridGap","justifyContent","children","SearchBox","setBooks","setNoResult","useState","searchInput","setSearchInput","isLoading","setLoading","useEffect","trim","length","search","ms","promise","fetch","Promise","resolve","reject","setTimeout","Error","then","response","json","data","items","totalItems","catch","error","console","message","alert","finally","InputGroup","padding","FormControl","placeholder","aria-label","aria-describedby","type","value","onChange","e","onKeyUp","key","Append","onClick","disabled","Parent","books","noResult","id","alt","textAlign","map","volume","i","volumeInfo","imageLinks","thumbnail","authors","join","infoLink","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13dd2700.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Card } from 'react-bootstrap';\n\nconst BookCard = ({ imgSrc, title, author, publisher, link }) => (\n\t<Card bg='light'>\n\t\t<Card.Img\n\t\t\tvariant='top'\n\t\t\tsrc={imgSrc}\n\t\t\tstyle={{ height: '100%', width: '100%', objectFit: 'contain' }}\n\t\t/>\n\t\t<Card.Body>\n\t\t\t<Card.Title>{title}</Card.Title>\n\t\t\t<Card.Text>\n\t\t\t\t{`By: ${author}`}\n\t\t\t\t<br />\n\t\t\t\t{`Published by: ${publisher}`}\n\t\t\t</Card.Text>\n\t\t\t<Button variant='success' href={link} target='_blank'>\n\t\t\t\tSee this book\n\t\t\t</Button>\n\t\t</Card.Body>\n\t</Card>\n);\n\nexport default BookCard;\n","import React from 'react';\n\nexport default props => (\n\t<div\n\t\tclassName='m-5'\n\t\tstyle={{\n\t\t\tdisplay: 'grid',\n\t\t\tgridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\n\t\t\tgridGap: '30px',\n\t\t\tjustifyContent: 'center'\n\t\t}}\n\t>\n\t\t{props.children}\n\t</div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Button, FormControl, InputGroup } from 'react-bootstrap';\n\nfunction timeout(ms, promise) {\n\treturn new Promise(function(resolve, reject) {\n\t\tsetTimeout(function() {\n\t\t\treject(new Error('timeout'));\n\t\t}, ms);\n\t\tpromise.then(resolve, reject);\n\t});\n}\n\nconst SearchBox = ({ setBooks, setNoResult }) => {\n\tconst [searchInput, setSearchInput] = useState('');\n\tconst [isLoading, setLoading] = useState(false);\n\n\tuseEffect(() => {\n\t\tif (searchInput.trim().length === 0) {\n\t\t\tsetNoResult(false);\n\t\t\tsetBooks([]);\n\t\t}\n\t}, [searchInput, setNoResult, setBooks]);\n\n\tconst search = () => {\n\t\tsetLoading(true);\n\t\ttimeout(\n\t\t\t10000,\n\t\t\tfetch(\n\t\t\t\t`https://www.googleapis.com/books/v1/volumes?q={${searchInput}}&langRestrict=en&orderBy=newest`\n\t\t\t)\n\t\t)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tsetBooks(data.items || []);\n\t\t\t\tsetNoResult(data.totalItems === 0);\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error);\n\t\t\t\tif (error.message === 'timeout') {\n\t\t\t\t\talert('Search took too much time...');\n\t\t\t\t} else {\n\t\t\t\t\talert('Impossible to get the books from Google!');\n\t\t\t\t}\n\t\t\t\tsetSearchInput('');\n\t\t\t})\n\t\t\t.finally(() => setLoading(false));\n\t};\n\treturn (\n\t\t<InputGroup className='mb-3' style={{ padding: '0 20vw' }}>\n\t\t\t<FormControl\n\t\t\t\tplaceholder='Search for books...'\n\t\t\t\taria-label='Book search query'\n\t\t\t\taria-describedby='basic-addon2'\n\t\t\t\ttype='search'\n\t\t\t\tvalue={searchInput}\n\t\t\t\tonChange={e => setSearchInput(e.target.value)}\n\t\t\t\tonKeyUp={e =>\n\t\t\t\t\tsearchInput.trim().length !== 0 && e.key === 'Enter' && search()\n\t\t\t\t}\n\t\t\t/>\n\t\t\t<InputGroup.Append>\n\t\t\t\t<Button\n\t\t\t\t\tvariant='info'\n\t\t\t\t\tonClick={search}\n\t\t\t\t\tdisabled={searchInput.trim().length === 0}\n\t\t\t\t>\n\t\t\t\t\t{isLoading ? 'Loading...' : 'Search'}\n\t\t\t\t</Button>\n\t\t\t</InputGroup.Append>\n\t\t</InputGroup>\n\t);\n};\n\nexport default SearchBox;\n","import React, { useState } from 'react';\nimport BookCard from './book-card';\nimport CardGroup from './card-group';\nimport SearchBox from './searchbox';\n\nconst Parent = () => {\n\tconst [books, setBooks] = useState([]);\n\tconst [noResult, setNoResult] = useState(false);\n\treturn (\n\t\t<div id='content'>\n\t\t\t<nav className='text-center pt-3'>\n\t\t\t\t<img src='logo.png' alt='logo' width='10%' />\n\t\t\t\t<h2 className='text-uppercase mb-3'>Book Finder</h2>\n\t\t\t\t<SearchBox setBooks={setBooks} setNoResult={setNoResult} />\n\t\t\t</nav>\n\t\t\t{/* TODO book cards */}\n\t\t\t{noResult ? (\n\t\t\t\t<p style={{ textAlign: 'center' }}>\n\t\t\t\t\tSorry, no result. Try another search.\n\t\t\t\t</p>\n\t\t\t) : (\n\t\t\t\t<CardGroup>\n\t\t\t\t\t{books.map((volume, i) => (\n\t\t\t\t\t\t<BookCard\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\timgSrc={\n\t\t\t\t\t\t\t\tvolume.volumeInfo.imageLinks &&\n\t\t\t\t\t\t\t\tvolume.volumeInfo.imageLinks.thumbnail\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttitle={volume.volumeInfo.title}\n\t\t\t\t\t\t\tauthor={\n\t\t\t\t\t\t\t\tvolume.volumeInfo.authors\n\t\t\t\t\t\t\t\t\t? volume.volumeInfo.authors.join(', ')\n\t\t\t\t\t\t\t\t\t: 'No author'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpublisher={volume.volumeInfo.publisher}\n\t\t\t\t\t\t\tlink={volume.volumeInfo.infoLink}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</CardGroup>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default Parent;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport GithubCorner from 'react-github-corner';\nimport Parent from './components/parent';\n\nfunction App() {\n\treturn (\n\t\t<div id='container'>\n\t\t\t<Parent />\n\t\t\t<footer>\n\t\t\t\t<div className='text-center'>\n\t\t\t\t\t&copy; 2019 &ndash; Guillaume Comte &ndash; All rights reserved\n\t\t\t\t\t&ndash; Find me on github{' '}\n\t\t\t\t\t<a href='https://github.com/guigui64'>@guigui64</a> &ndash; Icons made\n\t\t\t\t\tby{' '}\n\t\t\t\t\t<a href='https://www.flaticon.com/authors/freepik' title='Freepik'>\n\t\t\t\t\t\tFreepik\n\t\t\t\t\t</a>{' '}\n\t\t\t\t\tfrom{' '}\n\t\t\t\t\t<a href='https://www.flaticon.com/' title='Flaticon'>\n\t\t\t\t\t\twww.flaticon.com\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</footer>\n\t\t\t<GithubCorner href='https://github.com/guigui64/bookfinder' />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}